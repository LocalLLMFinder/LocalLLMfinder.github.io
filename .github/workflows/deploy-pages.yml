name: Deploy to GitHub Pages

on:
  # Trigger deployment on pushes to main branch
  push:
    branches: [ main ]
  
  # Trigger after data updates
  workflow_run:
    workflows: ["Update GGUF Models Data"]
    types:
      - completed
  
  # Allow manual deployment
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build site with Vite
        run: |
          echo "Building site with Vite..."
          npm run build
          
          # Verify build output
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not created"
            exit 1
          fi
          
          echo "✅ Build completed successfully"
          ls -la dist/
          
      - name: Copy additional assets
        run: |
          # Copy data files to dist
          if [ -d "data" ]; then
            cp -r data dist/
            echo "✅ Copied data directory"
          fi
          
          # Copy model JSON files
          cp gguf_models*.json dist/ 2>/dev/null && echo "✅ Copied model JSON files" || echo "ℹ️ No model JSON files found"
          
          # Copy SEO files
          cp sitemap.xml dist/ 2>/dev/null && echo "✅ Copied sitemap.xml" || echo "ℹ️ No sitemap.xml found"
          cp robots.txt dist/ 2>/dev/null && echo "✅ Copied robots.txt" || echo "ℹ️ No robots.txt found"
          
          # Copy other static assets
          cp .nojekyll dist/ 2>/dev/null && echo "✅ Copied .nojekyll" || echo "ℹ️ No .nojekyll found"
          cp 404.html dist/ 2>/dev/null && echo "✅ Copied 404.html" || echo "ℹ️ No 404.html found"
          cp CNAME dist/ 2>/dev/null && echo "✅ Copied CNAME" || echo "ℹ️ No CNAME found"
          
      - name: Optimize assets
        run: |
          echo "Optimizing assets for production..."
          
          # Calculate bundle sizes
          if [ -f "dist/assets/index.js" ]; then
            JS_SIZE=$(du -h dist/assets/*.js | awk '{print $1}' | head -1)
            echo "📦 JavaScript bundle size: $JS_SIZE"
          fi
          
          if [ -f "dist/assets/index.css" ]; then
            CSS_SIZE=$(du -h dist/assets/*.css | awk '{print $1}' | head -1)
            echo "🎨 CSS bundle size: $CSS_SIZE"
          fi
          
          # Check total dist size
          TOTAL_SIZE=$(du -sh dist | awk '{print $1}')
          echo "📊 Total build size: $TOTAL_SIZE"
          
          # Verify critical files exist
          echo "Verifying critical files..."
          [ -f "dist/index.html" ] && echo "✅ index.html" || echo "❌ index.html missing"
          [ -f "dist/assets/index.js" ] && echo "✅ JavaScript bundle" || echo "❌ JavaScript bundle missing"
          [ -f "dist/assets/index.css" ] && echo "✅ CSS bundle" || echo "❌ CSS bundle missing"
          
      - name: Add security headers
        run: |
          # Create _headers file for Netlify-style headers (GitHub Pages doesn't support this directly)
          # But we'll create it for documentation and potential future use
          cat > dist/_headers << 'EOF'
          /*
            X-Frame-Options: DENY
            X-Content-Type-Options: nosniff
            X-XSS-Protection: 1; mode=block
            Referrer-Policy: strict-origin-when-cross-origin
            Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.github.com
          EOF
          
          # Add security meta tags to HTML files
          find dist -name "*.html" -exec sed -i '/<head>/a\
          <meta http-equiv="X-Frame-Options" content="DENY">\
          <meta http-equiv="X-Content-Type-Options" content="nosniff">\
          <meta http-equiv="X-XSS-Protection" content="1; mode=block">\
          <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">' {} \;
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Verify deployment
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "⏰ Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          
          # Wait a moment for deployment to propagate
          sleep 10
          
          # Test if the site is accessible
          SITE_URL="${{ steps.deployment.outputs.page_url }}"
          echo "🔍 Testing site accessibility..."
          
          if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" | grep -q "200"; then
            echo "✅ Site is accessible and responding"
          else
            echo "⚠️ Site may not be immediately accessible (this is normal for new deployments)"
          fi
          
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js version**: 18" >> $GITHUB_STEP_SUMMARY
          echo "- **Build tool**: Vite" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Visit Site](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [View Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY